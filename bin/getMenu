#!/usr/bin/env node

var http = require("http");
var cheerio = require("cheerio");
var _ = require('underscore');

if (process.argv.length < 3) {
  console.error("Please provide a restaurant name");
  process.exit(1);
}

var url ="http://sanfrancisco.menupages.com/restaurants/" + process.argv[2] + "/menu";

var ignoredWords = [
  '&',
  'a',
  'and',
  'half',
  'in',
  'of',
  'on',
  'one',
  'three',
  'two',
  'with',
  //"stewed", 
  //"fried", 
  //"fry",
  //"saute",
  //"grilled", 
  //"baked", 
  //"seared",
  //"boiled", 
  //"pan-fried",
  //"roasted", 
  //"steamed", 
  //"poached", 
  //"fresh", 
  //"curried", 
  //"barecue", 
  "toasted",
  //"stir-fried", 
  "cooked",
  "served",
  "paper",
  "tossed",
  "topped"
];

var getMenu = function(html) {
  var $ = cheerio.load(html);
  var menu = {};
  $("cite").each(function(){
    var name = this.text()
      .replace(/^\d+[.:)]? */, ''); //name
    var allWords = this.parent().text() //ingredients
      .replace(/^\s*\d+[.:)]? */, '')
      .toLowerCase()
      .replace(/[.:\d]/g, '')
      .replace(/\(.*\)/g, '')
      .trim()
      .split(/[, \u00A0]+/)
      .map(function(word) {
        return word.replace(/^[^a-z]+|[^a-z]+$/g, '');
      })
    menu[name] = _.reject(allWords, function(word) {
      return _.contains(ignoredWords, word) || /\d/.test(word) || /^[^a-z]*$/i.test(word);
    });
  }) 
  return menu; 
};

http.get(url, function(res) {
  var data = '';
  res.setEncoding('utf8');
  res.on('data', function(chunk) {
    data += chunk;
  });
  res.on('end', function() {
    console.log(JSON.stringify(getMenu(data), null, 2));
  });
}).on('error', function(err) {
  console.log("Got error: " + err.message);
});
